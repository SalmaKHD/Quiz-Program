package application;

import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.ButtonBase;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;

public abstract class Question {
	protected Label question;
	protected String correctAnswer;
	protected static int nQuestions = 0; // total number of questions
	protected static int nCorrect = 0;
	protected BorderPane questionLayout = new BorderPane(); // layout of question + choices (a separate component)
	
	public Question(String question, String correctAnswer)
	{
		// create question instance variable and set its style
		this.question = new Label(question);
		this.question.setFont(Font.font("Arial", FontWeight.BOLD, 20));
		this.question.setTextFill(Color.hsb(340, 1.0, 0.5));
		// end
		this.correctAnswer = correctAnswer;
	}
	
	abstract Node getChoicesLayout(); // a method that requires returning the layout Node for choices
	abstract ButtonBase[] getChoices(); // a method that requires returning the array of choices
	
	public void showQuestion(BorderPane primaryLayout)
	{
		// adjust the layout of question + choices
		// see the output for a better understanding
		questionLayout.setMaxHeight(100); 
		questionLayout.setTop(this.question);  
		BorderPane.setAlignment(this.question, Pos.CENTER);
		BorderPane.setAlignment(this.getChoicesLayout(), Pos.CENTER);
		questionLayout.setCenter(this.getChoicesLayout());
		
		// add question + choices to the root Node
		primaryLayout.setCenter(questionLayout);
	}
	
	public Label getScoreLabel() 
	{
		Label score = new Label("Current Score: " + nCorrect + " out of " + nQuestions + ".");
		score.setFont(Font.font("Arial", FontPosture.ITALIC, 30));
		score.setTextFill(Color.hsb(340, 1.0, 0.5));
		BorderPane.setAlignment(score, Pos.BASELINE_CENTER);
		return score;
	}
	
	// handles events generated by selecting one of the choices
	public void handleActionEvents(BorderPane primaryLayout, Question[] questions, int nTotalQuestions)
	{
		for(ButtonBase choice: getChoices()) { 
			choice.setOnAction(e -> {
				// handle the current question
				if(choice.getText() == correctAnswer) 
					nCorrect++;
				nQuestions++;
				// handle the next question
				// terminate if there are no other questions
				if (nQuestions+1 <= nTotalQuestions) {
					questions[nQuestions].showQuestion(primaryLayout);
				}
				else { // terminate
					Label goodbyeMessage = new Label("THE END!");
					goodbyeMessage.setFont(Font.font(50)); goodbyeMessage.setTextFill(Color.BLACK);
					primaryLayout.setCenter(goodbyeMessage);
				}
				// update the score
				primaryLayout.setBottom(getScoreLabel());
			}); // end of event listener
		} // end of for loop
	} // end of handleActionEvents() method
	
}
